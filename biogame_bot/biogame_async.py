import asyncio
import os
import random
import sqlite3
import requests

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# ========================= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =========================
TOKEN = "7542463055:AAFdKLIzZBXfpK4TEGusWGavH5rn2F91CyU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
DATABASE_PATH = 'db/bio_game.db'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# ========================= –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =========================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect(DATABASE_PATH, check_same_thread=False)
cursor = conn.cursor()

# ========================= –ö–õ–ê–°–° –î–õ–Ø –ú–û–ù–°–¢–†–û–í =========================
class Monster:
    def __init__(self, id, name, power_base, hp_base, immu_base, level_modifier, description, photo_url, experience_reward, hp_reward, immu_reward):
        self.id = id
        self.name = name
        self.power_base = power_base
        self.hp_base = hp_base
        self.immu_base = immu_base
        self.level_modifier = level_modifier
        self.description = description
        self.photo_url = photo_url
        self.experience_reward = experience_reward
        self.immu_reward = immu_reward
        self.hp_reward = hp_reward
        self.power = 0
        self.hp = 0
        self.immu = 0

    def calculate_stats(self, player_level):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞."""
        self.power = int(self.power_base + (player_level - 1) * 0.8 * self.level_modifier)
        self.hp = int(self.hp_base + (player_level - 1) * 2.5 * self.level_modifier)
        self.immu = int(self.immu_base + (player_level - 1) * 0.15 * self.level_modifier)
        self.immu = min(self.immu, 10)

    def get_description(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–≥—Ä–µ."""
        return (f"{self.name}:\n"
                f"  *–°–∏–ª–∞: {self.power}*\n"
                f"  *–ó–¥–æ—Ä–æ–≤—å–µ: {self.hp}*\n"
                f"  *–ò–º–º—É–Ω–∏—Ç–µ—Ç: {self.immu}*\n"
                f" –û–ø–∏—Å–∞–Ω–∏–µ: {self.description}")

# FSM State
class Form(StatesGroup):
    start = State()
    create_hero_name = State()
    exploration = State()

# ========================= –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î =========================
def db_table_val(user_id: int, user_name: str, user_surname: str, username: str, chat_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    try:
        cursor.execute(
            'INSERT INTO test (user_id, user_name, user_surname, username, chat_id) VALUES (?, ?, ?, ?, ?)',
            (user_id, user_name, user_surname, username, chat_id)
        )
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

async def check_user_exists(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î."""
    try:
        cursor.execute("SELECT EXISTS (SELECT 1 FROM test WHERE username=?)", (username,))
        result = cursor.fetchone()
        return result[0] == 1
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def hero_stats(us_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ—Ä–æ—è."""
    try:
        cursor.execute("SELECT hero_name, power, hp, immu, level, experience FROM test WHERE user_id = ?", (us_id,))
        stats = cursor.fetchone()
        if stats:
            hero_name, power, hp, immu, level, experience = stats
            return (f"–ò–º—è: {hero_name}\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {level}\n"
                    f"–û–ø—ã—Ç: {experience}\n"
                    f"—Å–∏–ª–∞: {power}\n"
                    f"–∑–¥–æ—Ä–æ–≤—å–µ: {hp}\n"
                    f"–∏–º–º—É–Ω–∏—Ç–µ—Ç: {immu}"
                    )
        else:
            return "–û—Ä–≥–∞–Ω–∏–∑–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞."

async def gain_experience(us_id: int, amount: int, chat_id: int, bot: Bot):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    try:
        cursor.execute("SELECT experience, level, power, hp, immu, hero_name FROM test WHERE user_id=?", (us_id,))
        result = cursor.fetchone()
        if not result:
            await bot.send_message(chat_id, "–û—Ä–≥–∞–Ω–∏–∑–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        experience, level, power, hp, immu, hero_name = result
        experience += amount

        level_up_threshold = level * 100
        while experience >= level_up_threshold:
            level += 1
            experience -= level_up_threshold
            level_up_threshold = level * 100

            power += 1
            hp += 5
            await bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –¥–æ—Å—Ç–∏–≥ {level} —É—Ä–æ–≤–Ω—è!\n"
                                      f"–°–∏–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {power}\n"
                                      f"–ó–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {hp}")

        cursor.execute("UPDATE test SET experience=?, level=?, power=?, hp=?, immu=? WHERE user_id=?",
                       (experience, level, power, hp, immu, us_id))

        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞.")

async def get_random_monster(player_level):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cursor.execute("SELECT COUNT(*) FROM monsters")
        count = cursor.fetchone()[0]
        random_id = random.randint(1, count)  # –°–ª—É—á–∞–π–Ω—ã–π id –º–æ–Ω—Å—Ç—Ä–∞

        cursor.execute(
            '''SELECT id, name, power_base, hp_base, immu_base, level_modifier, description, photo_url, experience_reward, hp_reward, immu_reward FROM monsters WHERE id = ?''',
            (random_id,))
        monster_data = cursor.fetchone()

        if monster_data:
            monster = Monster(id=monster_data[0], name=monster_data[1], power_base=monster_data[2],
                              hp_base=monster_data[3], immu_base=monster_data[4], level_modifier=monster_data[5],
                              description=monster_data[6], photo_url=monster_data[7], experience_reward=monster_data[8], hp_reward=monster_data[9], immu_reward=monster_data[10])
            monster.calculate_stats(player_level)
            return monster
        else:
            return None
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑ –ë–î: {e}")
        return None

def create_explore_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å'."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="–ú–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º")],
        [KeyboardButton(text="/menu")]
    ])
    return markup

async def check_user_has_hero(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º (–ø–æ –Ω–∞–ª–∏—á–∏—é –∏–º–µ–Ω–∏ –≤ hero_names)."""
    try:
        cursor.execute("SELECT 1 FROM hero_names WHERE user_id = ? AND is_active = 1", (user_id,))
        result = cursor.fetchone()
        return result is not None
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è –≥–µ—Ä–æ—è: {e}")
        return False

async def create_hero(us_id: int, bot: Bot, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await bot.send_message(us_id, "–ö–∞–∫ –≤—ã –Ω–∞–∑–æ–≤–µ—Ç–µ —Å–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º?")
    await state.set_state(Form.create_hero_name)

def is_valid_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º."""
    try:
        response = requests.head(url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD-–∑–∞–ø—Ä–æ—Å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

async def jorney(us_id: int, bot: Bot):
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."""
    dice = random.randint(0, 20)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
        cursor.execute("SELECT level FROM test WHERE user_id=?", (us_id,))
        player_level = cursor.fetchone()[0]

        if dice in range(0, 3):
            attribute = random.choice(['power', 'hp', 'immu'])
            effect = random.randint(1, 3)

            cursor.execute(f"SELECT {attribute} FROM test WHERE user_id=?", (us_id,))
            score = cursor.fetchone()[0]

            if attribute == 'immu':
                effect = score // 3 + effect
            elif attribute == 'hp':
                effect *= 5

            attr = score - effect
            cursor.execute(f"UPDATE test SET {attribute}=? WHERE user_id=?", (attr, us_id))
            conn.commit()
            return (f"* –º—É—Ç–∞—Ü–∏—è! *\n"
                    f"-{effect} {attribute}")

        elif dice in range(3, 7):
            attribute = random.choice(['power', 'hp', 'immu'])
            effect = random.randint(1, 3)
            if attribute == 'hp':
                effect *= 10
            cursor.execute(f"SELECT {attribute} FROM test WHERE user_id=?", (us_id,))
            attr = cursor.fetchone()[0] + effect
            cursor.execute(f"UPDATE test SET {attribute}=? WHERE user_id=?", (attr, us_id))
            conn.commit()
            return (f"* —Ä–∞–∑–≤–∏—Ç–∏–µ! *\n"
                    f"+{effect} {attribute}")

        elif dice in range(7, 21):
            monster = await get_random_monster(player_level)

            if not monster:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞."

            cursor.execute("UPDATE test SET en_power=?, en_hp=?, en_immu=?, monster_type=? WHERE user_id=?",
                           (monster.power, monster.hp, monster.immu, monster.name, us_id))
            conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            if is_valid_url(monster.photo_url):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–æ–Ω—Å—Ç—Ä–∞
                await bot.send_photo(us_id, photo=monster.photo_url, caption=monster.get_description(), parse_mode="Markdown", reply_markup=create_battle_keyboard())
            else:
                await bot.send_message(us_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞ {monster.name}.\n{monster.get_description()}", parse_mode="Markdown", reply_markup=create_battle_keyboard())
            return ""

        else:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ."
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è."

def create_battle_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–∏—Ç–≤—ã."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text='–ê—Ç–∞–∫–æ–≤–∞—Ç—å!', callback_data='attack'))
    builder.add(InlineKeyboardButton(text='–£–±–µ–∂–∞—Ç—å', callback_data='escape'))
    builder.adjust(2)
    return builder.as_markup()

async def process_attack(us_id: int, call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ê—Ç–∞–∫–æ–≤–∞—Ç—å!"."""
    try:
        cursor.execute(
            "SELECT power, hp, immu, en_power, en_hp, en_immu, monster_type, hero_name FROM test WHERE user_id=?",
            (us_id,))
        stats = cursor.fetchone()

        if not stats:
            await bot.send_message(us_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–º–µ –∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–µ.")
            return

        power, hp, immu, en_power, en_hp, en_immu, monster_type, hero_name = stats

        base_dodge_chance_player = immu / 100
        base_dodge_chance_monster = en_immu / 100

        player_damage = power
        if random.random() < 0.05:
            player_damage = power // 2  # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
            await bot.send_message(us_id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö! –û—á–µ–Ω—å —Å–ª–∞–±—ã–π —É–¥–∞—Ä.")
        else:
            if random.random() < base_dodge_chance_monster:
                damage_reduction_amount = random.uniform(0.1, 0.5)
                player_damage = player_damage - int(player_damage * damage_reduction_amount) #–£–±–∏—Ä–∞–µ–º float
                await bot.send_message(us_id, "–°–æ–ø–µ—Ä–Ω–∏–∫ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞—Ç–∞–∫—É!")
            else:
                if random.random() < 0.05:
                    player_damage = int(power * 1.5)  # –£–±–∏—Ä–∞–µ–º float
                    await bot.send_message(us_id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —É–¥–∞—Ä!")

        monster_damage = en_power
        if random.random() < 0.05:
            monster_damage = en_power // 2  # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
            await bot.send_message(us_id, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–µ–ª–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö!")
        else:
            if random.random() < base_dodge_chance_player:
                damage_reduction_amount = random.uniform(0.1, 0.5)
                monster_damage = monster_damage - int(monster_damage * damage_reduction_amount)  # –£–±–∏—Ä–∞–µ–º float
                await bot.send_message(us_id, "–í—ã —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∞—Ç–∞–∫—É!")
            else:
                if random.random() < 0.05:
                    monster_damage = int(en_power * 1.5)  # –£–±–∏—Ä–∞–µ–º float
                    await bot.send_message(us_id, "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–Ω–µ—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!")

        hp -= monster_damage
        en_hp -= player_damage

        cursor.execute("UPDATE test SET hp=?, en_hp=? WHERE user_id=?", (hp, en_hp, us_id))
        conn.commit()

        #–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("UPDATE hero_names SET power=?, hp=?, immu=? WHERE hero_name = (SELECT hero_name FROM test WHERE user_id = ?) AND user_id=?", (power, hp, immu, us_id, us_id))
        conn.commit()

        await bot.answer_callback_query(call.id, '–ê—Ç–∞–∫–∞!')

        await bot.send_message(us_id, f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞.\n"
                                   f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–Ω–µ—Å {monster_damage} —É—Ä–æ–Ω–∞.\n")
        if en_hp <= 0:
            cursor.execute("SELECT monster_type FROM test WHERE user_id=?", (us_id,))
            monster_type = cursor.fetchone()[0]

            #–ü–û–õ–£–ß–ê–ï–ú ID –ú–û–ù–°–¢–†–ê
            cursor.execute("SELECT en_power, en_hp, en_immu, monster_type FROM test WHERE user_id=?", (us_id,))
            en_power, en_hp, en_immu, monster_type  = cursor.fetchone()

            #–î–û–°–¢–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–ï –†–ï–í–ê–†–î–ê
            cursor.execute("SELECT experience_reward, immu_reward, hp_reward FROM monsters WHERE name=?", (monster_type,))
            exp_reward, immu_reward, hp_reward  = cursor.fetchone()
            await bot.send_message(us_id, f'{monster_type} –ø–æ–≤–µ—Ä–∂–µ–Ω!\n'
                                       f'–ò–º–º—É–Ω–∏—Ç–µ—Ç +{immu_reward}\n'
                                       f'–ó–¥–æ—Ä–æ–≤—å–µ +{hp_reward}\n'
                                       f'–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +{exp_reward}')
            cursor.execute("UPDATE test SET immu=?, hp=? WHERE user_id=?", (immu + immu_reward, hp + hp_reward, us_id))
            conn.commit()

            await gain_experience(us_id, exp_reward, us_id, bot)

        elif hp <= 0:
            await bot.send_message(us_id, '–í–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º –ø–æ–≥–∏–±. –ü–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ!')
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º', callback_data='create_hero')]])

            #–ø–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∫–∞–∫ –º–µ—Ä—Ç–≤–æ–≥–æ
            cursor.execute("UPDATE hero_names SET is_active = 0 WHERE hero_name = (SELECT hero_name FROM test WHERE user_id = ?) AND user_id=?", (us_id, us_id))

            conn.commit()
            await menu_view(us_id, bot,create_start_menu()) #–æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
            await bot.send_message(us_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

        else:
            await bot.send_message(us_id,  f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {monster_type} \n "
                                           f"—Å–∏–ª–∞: {en_power} \n "
                                           f"–∑–¥–æ—Ä–æ–≤—å–µ: {en_hp} \n "
                                           f"–∏–º–º—É–Ω–∏—Ç–µ—Ç: {en_immu} \n"
                                           f"\n–í—ã: \n "
                                           f"—Å–∏–ª–∞: {power} \n "
                                           f"–∑–¥–æ—Ä–æ–≤—å–µ: {hp} \n "
                                           f"–∏–º–º—É–Ω–∏—Ç–µ—Ç: {immu}",
                                   reply_markup=create_battle_keyboard())

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ç–∞–∫–∏: {e}")
        await bot.send_message(us_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏.")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.send_message(us_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def process_escape(us_id: int, call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–±–µ–∂–∞—Ç—å"."""
    try:
        cursor.execute("SELECT immu FROM test WHERE user_id=?", (us_id,))
        immu = cursor.fetchone()[0]
        await bot.answer_callback_query(call.id, '–ü–æ–±–µ–≥!')
        await bot.send_message(us_id, '–í—ã –∏–∑–±–µ–∂–∞–ª–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ –ø–æ—Ç–µ—Ä—è–ª–∏ 1 –∏–º–º—É–Ω–∏—Ç–µ—Ç.')
        cursor.execute("UPDATE test SET immu=? WHERE user_id=?", (immu - 1, us_id))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–±–µ–∂–∞—Ç—å: {e}")
        await bot.send_message(us_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–±–µ–≥–∞.")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.send_message(us_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

def create_start_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º")],
    ])
    return markup

async def menu_view(user_id: int, bot: Bot, reply_markup = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é."""
    markup = reply_markup or ReplyKeyboardMarkup(resize_keyboard=True)
    if await check_user_has_hero(user_id):
        markup.keyboard.append([KeyboardButton(text="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å"), KeyboardButton(text="–ú–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º")])
        markup.keyboard.append([KeyboardButton(text="/top")])

    await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=markup)

# ========================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =========================
@dp.message(CommandStart())
async def start_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    user_surname = message.from_user.last_name
    username = message.from_user.username
    us_id = message.from_user.id

    reply_markup = create_start_menu()
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bio-Game!\n"
                        "–ú–∏–Ω–∏-–∏–≥—Ä–∞ –æ –º–∏–∫—Ä–æ–º–∏—Ä–µ, –≤—ã–∂–∏–≤–∞–Ω–∏–∏ –∏ —ç–≤–æ–ª—é—Ü–∏–∏.\n"
                        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å!",
                        reply_markup=reply_markup)

    if not await check_user_exists(username):
        db_table_val(user_id=us_id, user_name=user_name, user_surname=user_surname, username=username, chat_id=chat_id)

    await state.set_state(Form.start)

@dp.message(Command("menu"))
async def menu_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu."""
    user_id = message.from_user.id
    await menu_view(user_id, bot, create_start_menu())

@dp.message(Command("top"))
async def show_top_rating(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É."""
    try:
        cursor.execute("""
            SELECT
                hn.hero_name,
                t.level,
                t.power,
                t.hp,
                t.immu,
                (t.level * 1000) + t.experience AS rating
            FROM hero_names hn
            JOIN test t ON hn.user_id = t.user_id
            WHERE hn.is_active = 1
            ORDER BY rating DESC
            LIMIT 10
        """)
        top_players = cursor.fetchall()

        if not top_players:
            await bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
            return

        response = "üèÜ *–¢–æ–ø-10 –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤* üèÜ\n\n"
        for i, (hero_name, level, power, hp, immu, rating) in enumerate(top_players):
            response += (f"{i + 1}. *{hero_name}* (lvl: {level})\n"
                         f"   power: {power}, hp: {hp}, immu: {immu}\n")

        await bot.send_message(message.chat.id, response, parse_mode="Markdown")

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.")

@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º")
async def create_hero_handler(message: types.Message, state: FSMContext, bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞."""
    await create_hero(message.from_user.id, bot, state)

@dp.message(Form.create_hero_name, F.text)
async def process_hero_name(message: types.Message, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –≥–µ—Ä–æ—è –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ."""
    hero_name = message.text
    us_id = message.from_user.id
    chat_id = message.chat.id
    try:
        power = random.randint(2, 6)
        hp = random.randint(10, 50)
        immu = random.randint(0, 3)
        cursor.execute("UPDATE hero_names SET is_active = 0 WHERE user_id = ? AND is_active = 1", (us_id,))
        cursor.execute("INSERT INTO hero_names (user_id, hero_name, experience, level, is_active, power, hp, immu) VALUES (?, ?, 0, 1, 1, ?, ?, ?)", (us_id, hero_name, power, hp, immu))

        cursor.execute("UPDATE test SET power=?, hp=?, immu=?, level=1, experience=0, hero_name=? WHERE user_id=?", (power, hp, immu, hero_name, us_id))
        conn.commit()

        await bot.send_message(chat_id, f"–û—Ä–≥–∞–Ω–∏–∑–º {hero_name} —Å–æ–∑–¥–∞–Ω!\n\n" + await hero_stats(us_id), reply_markup=create_explore_menu(), parse_mode="Markdown")
        await state.clear()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–µ—Ä–æ—è: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–µ—Ä–æ—è.")

@dp.message(F.text == '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å')
async def explore_handler(message: types.Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å'."""
    user_id = message.from_user.id
    if await check_user_has_hero(user_id):
        report = await jorney(user_id, bot)
        await message.reply(report, reply_markup=create_explore_menu(), parse_mode="Markdown")
        await state.set_state(Form.exploration)
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º!")

@dp.message(F.text == '–ú–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º')
async def my_hero_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º'."""
    stats = await hero_stats(message.from_user.id)
    await message.reply(stats)

# ========================= –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK-–ó–ê–ü–†–û–°–û–í =========================
@dp.callback_query(F.data == 'create_hero')
async def create_hero_callback(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"."""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id, "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º...")
    await bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=None)
    await create_hero(user_id, bot, state)

@dp.callback_query(F.data == 'attack')
async def attack_callback(call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å!"."""
    user_id = call.message.chat.id
    await process_attack(user_id, call, bot)

@dp.callback_query(F.data == 'escape')
async def escape_callback(call: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–±–µ–∂–∞—Ç—å"."""
    user_id = call.message.chat.id
    await process_escape(user_id, call, bot)

# ========================= –ó–ê–ü–£–°–ö –ë–û–¢–ê =========================
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        conn.close()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    asyncio.run(main())