import asyncio
import os
from dotenv import load_dotenv
import pytz
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ API key –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENWEATHERMAP_API_KEY = os.environ.get("OPENWEATHERMAP_API_KEY")

if not BOT_TOKEN or not OPENWEATHERMAP_API_KEY:
    print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ OPENWEATHERMAP_API_KEY.")
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [
            types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞"),
            types.KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
            types.KeyboardButton(text="–ú–∏–Ω—Å–∫")
        ],
        [
            types.KeyboardButton(text="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),
            types.KeyboardButton(text="–ö–∞–∑–∞–Ω—å"),
            types.KeyboardButton(text="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")
        ],
        [
            types.KeyboardButton(text="–ß–µ–ª—è–±–∏–Ω—Å–∫"),
            types.KeyboardButton(text="–û–º—Å–∫"),
            types.KeyboardButton(text="–°–∞–º–∞—Ä–∞"),
            types.KeyboardButton(text="–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É")
        ]
    ])
    return markup

def hpa_to_atm(hpa):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª–µ–π –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã."""
    return hpa / 1013.25

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    markup = create_keyboard()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã!\n"
        "–Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É",
        reply_markup=markup
    )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("help"))
async def command_help_handler(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""

    await message.answer(
        f"–Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n"

    )

async def get_weather(city: str, message: types.Message) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    try:
        # 1. –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        current_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(current_url) as current_response:
                current_response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                current_data = await current_response.json()

        if current_data["cod"] != 200:
            await message.reply("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        temperature = current_data["main"]["temp"]
        feels_like = current_data["main"]["feels_like"]
        description = current_data["weather"][0]["description"]
        pressure_hpa = current_data["main"]["pressure"]
        pressure_atm = hpa_to_atm(pressure_hpa)  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ
        humidity = current_data["main"]["humidity"]
        wind_speed = current_data["wind"]["speed"]
        visibility = current_data.get("visibility", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") #–≤–∏–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

        # 2. –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHERMAP_API_KEY}"
        async with aiohttp.ClientSession() as session:
            async with session.get(geo_url) as geo_response:
                geo_response.raise_for_status()
                geo_data = await geo_response.json()

        lat = geo_data[0]["lat"]
        lon = geo_data[0]["lon"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        forecast_url = f"http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(forecast_url) as forecast_response:
                forecast_response.raise_for_status()
                forecast_data = await forecast_response.json()

        # –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 —á–∞—Å–∞
        forecast = forecast_data['list'][0] #–°–∞–º—ã–π –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        forecast_temperature = forecast['main']['temp']
        forecast_description = forecast['weather'][0]['description']
        forecast_time_utc = forecast['dt_txt'] #–í—Ä–µ–º—è –≤ UTC

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≥–æ—Ä–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞!)
        if city == "–ú–æ—Å–∫–≤–∞" or city == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" or city == "–ö–∞–∑–∞–Ω—å" or city == "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥" or city == "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É":
            timezone = pytz.timezone('Europe/Moscow')
        elif city == "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫":
            timezone = pytz.timezone('Asia/Novosibirsk')
        elif city == "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" or city == "–ß–µ–ª—è–±–∏–Ω—Å–∫":
            timezone = pytz.timezone('Asia/Yekaterinburg')
        elif city == "–û–º—Å–∫":
            timezone = pytz.timezone('Asia/Omsk')
        elif city == "–°–∞–º–∞—Ä–∞":
            timezone = pytz.timezone('Europe/Samara')
        else:
            timezone = pytz.utc #–ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        forecast_time_utc_dt = datetime.strptime(forecast_time_utc, '%Y-%m-%d %H:%M:%S') #–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–æ –≤—Ä–µ–º—è
        forecast_time_local_dt = pytz.utc.localize(forecast_time_utc_dt).astimezone(timezone) #–õ–æ–∫–∞–ª–∏–∑–∏—É—Ä–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        forecast_time_local = forecast_time_local_dt.strftime('%Y-%m-%d %H:%M:%S') #–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        weather_info = (
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure_hpa} –≥–ü–∞ ({pressure_atm:.2f} –∞—Ç–º)\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"–í–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –º\n"
            f"\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_time_local} (–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è):\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast_temperature}¬∞C\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {forecast_description}"
        )
        await message.reply(weather_info)

    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except (KeyError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö API: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: types.Message):
     await get_weather(message.text, message)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())